6.3 string的常见用法详解

C中使用char str[]来存放字符串
使用字符数组操作复杂且易出错
C++在STL中加入了string类型
对字符串常用的需求功能进行了封装
使操作更方便

使用string
需添加
#include<string>
using namespace std;
需注意
string.h和string是不一样的头文件

1 string的定义

string str;
string str="abcd";//初始化

2 string中内容的访问

A 通过下标访问

像字符数组那样用str[i]来访问
如果要读入和输出整个字符串
则只能使用cin和cout
cin>>str;
cout<<str;
如要使用printf来输出string
需使用c_str()将string类型转换为字符数组进行输出
printf("%s\n",str.c_str());

B 通过迭代器访问

一般通过A即可满足访问的需求
但有些函数比如insert()与erase()则要求以迭代器为参数

由于string不像其他STL容器那样需要参数，其定义为
string::iterator it;
这样便得到了迭代器it
并可以通过*it来访问string里的每一位
printf("%c",*it);

需指出string和vector一样，支持直接对迭代器进行加减某个数字
例如str.begin()+3

3 string常用函数实例解析

A operator+=

这是string的加法
可以将两个string直接拼接起来

string str1="abc";
string str2="xyz";
string str3;
str3=str1+str2;
str1+=str2;
输出
str3="abcxyz"
str1="abcxyz"

B compare operator

两个string类型可以直接使用
==
!=
<
<=
>
>=
比较大小
比较规则是字典序

if(str1<str2)printf("ok\n");

C length()/size()

用length()返回string的长度
即存放的字符数
时间复杂度为O(1)
size()与length()基本相同
printf("%d %d\n",str.length(),str.size());

D insert()

string的insert()函数有很多种写法
以下给出几个常用的写法
时间复杂度为O(N)

D1 insert(pos,string)
在pos号位置插入字符串string

str.insert(3,str2);//往str[3]处插入str2，
                   //str2的位置直接写要插入的元素"abc"也是可以的
     
D2 insert(it,it2,it3)
it为原字符串的欲插入位置，it2和it3为待插入字符串的守尾迭代器
用来表示串[it2,it3)将被插入在it的位置上

str.insert(str.begin()+3,str2.begin(),str2.end());

E erase()
erase()有两种用法：
删除单个元素
删除一个区间内的所有元素
时间复杂度均为O(N)

E1 删除单个元素
str.erase(it)用于删除单个元素
it为需要删除的元素的迭代器

str.erase(str.begin()+4);//删除4号位

E2 删除一个区间内的所有元素
有两种方法

E21 str.erase(first,last)
first为需要删除的区间的其实迭代器
last则为需要删除的区间的末尾迭代器的下一个地址
即为删除[first,last)

str.erase(str.begin()+2,str.end()-1);

E22 str.erase(pos,length)
其中pos为需要开始删除的起始位置
length为删除的字符个数

str.erase(3,2);//删除从3号位开始的两个字符

F clear()
clear()用以清空string中的数据
时间复杂度一般为O(1)

str.clear();

G substr()
substr(pos,len)返回从pos位号开始、长度为len的子串
时间复杂度为O(len)

cout<<str.substr(12,7)<<endl;

H string::npos
string::npos是一个常数，其本身的值为-1
但由于是unsigned_int类型
因此实际上也可以认为是unsigned_int类型的最大值
string::npos用以作为find函数失配时的返回值

一般可以认为string::npos等于-1或者4294967295

I find()

I1 str.find(str2)
当str2是str的字串时
返回其在str中第一次出现的位置
如果str2不是str的子串
那么返回string::npos

I2 str.find(str2.pos)
从str的pos位号开始匹配str2
返回值与上相同
时间复杂度为O(nm)
n为str的长度
m为str2的长度

if(str.find(str2)!=string::npos){
  cout<<str.find(str2)<<endl;
}
if(str.find(str2,7)!=string::npos){
  cout<<str.find(str2,7)<<endl;
}

J replace()

J1 str.replace(pos,len,str2)
把str从pos号位开始
长度为len的子串替换为str2

J2 str.replace(it1,it2,str2)
把str的迭代器[it2,it2)范围内的子串替换为str2
时间复杂度为O(str.length())

str="Maybe you will turn around.";
str2="will out";
str3="surely";
cout<<str.replace(10,4,str2)<<endl;
cout<<str.replace(str.begin(),str.begin()+5,str3)<<endl;

Maybe you will not turn around.
surely you will not turn around.






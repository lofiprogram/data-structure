6.6 priority_queue的常见用法详解

priority_queue又称为优先队列
其底层是用堆来进行实现的

在优先队列中
队首元素一定是当前队列中优先级最高的那一个
例如
桃子 优先级3
梨子 优先级4
苹果 优先级1
出队顺序则为 梨子 桃子 苹果

当然，可以在任何时候往优先队列里面加入元素
优先队列底层的数据结构堆（heap）会随时调整结构
使每次的队首元素都是优先级最大的

优先级则是规定出来的

1 priority_queue的定义

使用优先队列需添加
#include<queue>
using namespace std;

priority_queue<typename>name;
typename可以是任意基本数据类型或容器

2 priority_queue容器内元素的访问

和队列不一样
优先队列没有front()函数与back()函数
只能通过top()函数来访问队首元素（堆顶元素）

q.push(3);
q.push(4);
q.push(1);
printf("%d\n",q.top());
q.pop();
printf("%d\n",q.top());
4
3

3 priority_queue常用函数实例解析

A push()

push(x)将令x入队
时间复杂度为O(logN)
N为当前优先队列中元素的个数

B top()

top()可以获得队首元素
时间复杂度为O(1)

C pop()

pop()可以令队首元素出队
时间复杂度为O(logN)
其中N为当前优先队列中的元素个数

D empty()

empty()检测优先队列是否为空
返回ture则空
返回false则非空
时间复杂度为O(1)

if(q.empty()==true){}

E size()

size()返回优先队列内元素的个数
时间复杂度为O(1)

printf("%d\n",q.size());

4 priority_queue内元素优先级的设置

如何定义优先队列内元素的优先级是运用好优先队列的关键
下面分别介绍基本数据类型
例如int double char 
与结构体类型的优先级设置方法

A 基本数据类型的优先级设置

此处指的基本数据类型就是int型 double型 char型等
可以直接使用的数据类型
优先队列对它们的优先级设置
一般是数字大的优先级越高
因此队首元素就是优先队列内元素最大的那个
（如果是char型，则是字典序最大的）

对基本数据类型来说
下列两种优先队列的定义是等价的
以int型为例

priority_queue<int>q;
priority_queue<int,vector<int>,less<int> >q;

可以发现第二种定义方式多出了两个参数

其中第二个参数vector<int>填写的是
来承载底层数据结构堆(heap)的容器
如果第一个参数是double型或者char型
此处只需要填写
vector<double>或vector<char>

第三个参数less<int>表示
数字大的优先级越大
而greater<int>表示数字小的优先级越大
如需想让优先队列总是把最小的元素放在队首
只需进行如下定义：
priority_queue<int,vector<int>,greater<int> >q;

事实上，即便是基本数据类型
也可以使用下面讲解的结构体的优先级设置方法
只不过第三个参数的写法不太一样

B 结构体的优先级设置

struct fruit{
    string name；
    int price；
}；

现在希望按水果的价格高的为优先级高
就需要重载(overload)小于号"<"
重载是指对已有的运算符进行重新定义
也就是说，可以改变小于号的功能
（例如把它重载为大于号的功能）
此处只需知道它的写法即可

struct fruit{
    string name;
    int price;
    friend bool operator < (fruit f1, fruit f2){
        return f1.price<f2.price;
    }
};

fruit结构体中增加了一个函数
其中"friend"为友元
其具体含义此处不讨论

后面的"bool operator < (fruit f1, fruit f2)"
对fruit类型的操作符"<"进行了重载
重载大于号会编译错误
因为从数学上来说只需要重载小于号
即f1>f2等价于判断f2<f1
而f1==f2则等价于判断!(f1<f2)&&!(f2<f1)

函数内部为"return f1.price<f2.price;"
因此重载后小于号还是小于号的作用

此时就可以直接定义fruit类型的优先队列
其内部就是以价格高的水果为优先级高

priority_queue<fruit>q;

同理，如果想要以价格低的水果优先级为高
只需要把结构体中的"return f1.price<f2.price;"
改为"return f1.price>f2.price;"

struct fruit{
    string name;
    int price;
    friend bool operator < (fruit f1, fruit f2){
        return f1.price>f2.price;
    }
}f1,f2,f3;

priority_queue<fruit>q;
f.name="桃子";f.price=3;
f.name="梨子";f.price=4;
f.name="苹果";f.price=1;
q.push(f);q.push(f);q.push(f);
cout<<q.top().name<<q.top().price<<endl;

苹果 1

此处对小于号的重载与排序函数sort中的cmp函数有些相似
它们的参数都是两个变量
函数内部都是return了ture或者false
事实上，这两者的作用确实是类似的
只不过效果看上去似乎是“相反”的

在排序中
如果是"return f1.price>f2.price;"
那么则是按价格从高到低排序
但是在优先队列中却是把价格低的放到队首
原因在于
优先队列本身默认的规则就是优先级高的放在队首
因此把小于号重载为大于号的功能只是把这个规则反向了一下
如无法理解
不妨记住
优先队列的这个函数与sort中的cmp函数的效果是相反的

有没有办法跟sort中的cmp函数那样写在结构体外面呢
自然是有办法的
只需要把friend去掉
把小于号改成一对小括号
然后把重载的函数写在结构体外面
同时将其用struct包装起来

struct cmp{
    bool operator () (fruit f1,fruit f2){
        return f1.price>f2.price;
    }
};

在这种情况下，需要用之前讲解的第二种定义方法来定义优先队列
priority_queue<fruit,vector<fruit>,cmp>q;
只是把greater<>换成了cmp

即便是基本数据类型或者其他STL容器（例如set）
也可以通过同样的方式来定义优先级

最后指出
如果结构体内的数据较为庞大（例如出现了字符串或者数组）
建议使用引用来提高效率
此时比较类的参数中需要加上"const"和"&"
friend bool operator < (const fruit &f1,const furit &f2){
    return f1.price>f2.price;
}
bool operator () (const fruit &f1,const furit &f2){
    return f1.price>f2.price;
}

5 priority_queue的常见用途

priority_queue可以解决一些贪心问题
也可以对Dijkstra算法进行优化（因为优先队列的本质是堆）

需注意
使用top()函数前
必须用empty()判断优先队列是否为空
否则可能因为队空而出现错误






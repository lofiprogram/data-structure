6.4 map的常用用法详解

map译为映射

在定义数组时，如int array[100]
其实是定义了一个从int型到int型的映射
array[0]=25，array[4]=37
就分别是将0映射到25，将4映射到37
double型的数组则是将int型映射到double型
db[0]=3.14
无论是什么类型，总是将int型映射到其他类型
这有一个弊端
当要使用数组来表示，字符串->页码
这样的对应关系时，不方便进行操作
这时就可以使用map

map可以将任何基本类型（包括STL容器）
映射到任何基本类型（包括STL容器）
即可以建立string型到int型的映射

一个例子
判断给定的一些数字在某个文件中是否出现过
正常思路：
开一个bool型hashTable[max_size]
通过判断hashTable[x]为ture还是false来确定x是否在文件中出现
但是当这些数字很大（例如有几千位）
那么这个数组就会开不了
这时map就可以派上用场
因为可以把这些数字当成一些字符串
然后建立string至int的映射（或直接建立int至int的映射）

使用map需加上：
#include<map>
using namespace std;

1 map的定义

map<typename1,typename2>mp;
第一个typename1是键的类型（映射前类型）
第二个typenmae2是值的类型（映射后类型）
如果是int型映射到int型，相当于普通的int型数组
如果是字符串到整型的映射
必须使用string而不是char数组
map<string,int>mp;
因为char数组作为数组，是不能被作为键值的
map的键和值也可以是STL容器
map<set<int>,string>mp;

2 map容器内元素的访问

map一般有两种访问方式：
通过下标访问
通过迭代器访问

A 通过下标访问

对于map<char,int>mp来说
可以使用mp['c']的方式来访问它对应的整数
可以使用mp['c']=20这样的方式
需注意
map中的键是唯一的

B 通过迭代器访问

map<typename1,typename2>::iterator it;
map迭代器的使用方式和其他STL容器的迭代器不同
因为map的每一对映射都有两个typename
这决定了必须能通过一个it来同时访问键和值
事实上，map可以通过
it->first来访问键
it->second来访问值

mp['m']=20;
mp['r']=30;
mp['a']=40;
for(map<hcar,int>::iterator it=mp.begin();it!=mp.end();it++){
     printf("%c %d",it->first,it->second);
}

a 40
m 20
r 30

map会以键从小到大自动排序
a<m<r

这是由于map内部是使用红黑树实现的（set也是）
在建立映射的过程中会自动实现从小到大的排序功能

3 map常用函数实例解析

A find()

find(key)返回键为key的映射的迭代器
时间复杂度为O(logN)，N为map中映射的个数

map<char,int>::iterator it=mp.find('b');
printf("%c %d\n",it->first,it->second);

B erase()

erase()有两种用法：
删除单个元素
删除一个区间内的所有元素

B1 删除单个元素

B11 mp.erase(it)，it为需要删除的元素的迭代器
时间复杂度为0(1)
map<char,int>::iterator it=mp.find('b');
mp.erase(it);

B12 mp.erase(key),key为欲删除的映射的键
时间复杂度为O(logN)，N为map内元素的个数
mp.erase('b');

B2 删除一个区间内的所有元素

mp.erase(first,last)
first为需要删除的区间的起始迭代器
last则为需要删除的区间的末尾迭代器的下一个地址
也即为删除左闭右开的区间[first,last)
时间复杂度为O(last-first)

mp.erase(it,mp.end());

C size()

size()用来获得map中映射的对数
时间复杂度为O(1)

printf("%d\n",mp.size());

D clear()

clear()用来清空map中的所有元素
复杂度为O(N)
其中N为map中元素的个数

4 map的常见用途

A 需要建立字符（或字符串）与整数之间的映射的题目
  使用map可减少代码量
B 判断大整数或者其他类型数据是否存在的题目
  可以把map当bool数组用
C 字符串和字符串的映射

map的键和值是唯一的
如果一个键需要对应多个值
就只能用multimap

另外，C++11标准中增加了unordered_map
以散列代替map内部的红黑树实现
可以用来处理只映射而不按key排序的需求
速度比map要快得多



























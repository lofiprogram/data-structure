2.5 数组

2.5.1 一维数组

把相同数据类型的变量组合在一起而产生的数据集合

数据类型 数组名[数组大小];
数组大小必须是整数常量
不可以是变量

只能访问下标为0-size-1的元素

初始化
int a[10]={0};
int a[10]={};

根据一些条件
可以不断让后一位的结果由前一位或前若干位计算得来
这种做法被称为递推
a[i]=a[i-1]*2;

2.5.2 冒泡排序

排序是指将一个无序序列按某个规则进行有序排列

冒泡排序本质在于交换
即每次通过交换的方式把当前剩余元素的最大值移动到一端
而当剩余元素减少为0时
排序结束

for(int i=0;i<=4;i++){
    for(int j=0;j<5-i;j++){
        if(a[j]>a[j+1]){
            int temp=a[j];
            a[j]=a[j+1];
            a[j+1]=temp;
        }
    }
}

2.5.3 二维数组

二维数组就是一维数组的扩展

数据类型 数组名[第一维大小][第二维大小];

初始化
需要按第一维的顺序依次用大括号给出第二维初始化情况
然后将它们用逗号分隔
并用大括号全部括住
int a[5][6]={{3,1,2},{8,4},{},{1,2,3,4,5}};
1、2、4行被赋予了初值
第3行使用大括号{}跳过了
如果不写大括号是无法通过过编译的
剩下部分均被默认赋为0

如果数组大小较大
大概10^6级别
则需要将其定义在主函数外面
否则会使程序异常退出
函数内部申请的局部变量来自系统栈，允许申请的空间小
函数外部申请的全局变量来自静态存储区，允许申请的空间较大

2.5.4 memset 对数组中每一个元素赋相同的值

一般来说给数组中每一个元素赋相同的值有两种方法：
memset函数和fill函数
fill函数在第6章STL的algorithm头文件中介绍

memset函数的格式为：
memset(数组名，值，sizeof(数组名));

使用memset需要在程序开头添加string.h头文件
只建议初学者使用memset赋0或-1
因为memset使用的是按字节赋值
这样组成int型的4个字节就会被赋成相同的值

而由于0的二进制补码全为0，-1的二进制补码为全1
不容易出错

如果要对数组赋其他数字（例如1）
请使用fill函数

memset(a,0,sizeof(a));
对二维数组或多维数组的赋值方法也是一样的
只需填写数组名
不需要改变任何东西

2.5.5 字符数组







            
        




















CHAP2 C/C++快速入门

头文件 主函数

2.1 基本数据类型

2.1.1 变量的定义

1 变量第一个字符必须是字母或下划线
2 变量区分大小写

2.1.2 变量类型

1 整型
int 32bit 2*10^9范围以内的整数
int 输出格式 %d
long long 64bit 9*10^18范围以内的整数
如果long long型赋大于2^31-1的初值，需要在初值后面加上LL

2 浮点型
float 32bit 1bit符号位 8bit指数位 23bit尾数位
范围 -2^128~+2^128 有效精度只有6~7位（由2^23知）
double 64bit 1bit符号位 11bit指数位 52bit尾数位
范围 -2^1024~+2^1024 有效精度有15~16位
float和double的输出格式 %f

3 字符型

字符变量和字符常量 字符常量（必须是单个字符）必须用单引号标注
%c是char型的输出格式

转义字符 斜线后的字母失去了本身的含义 因此被称为转义字符
\n 换行
\t Tab键
\0 代表空字符NULL，其ASCII码为0，请注意\0不是空格

字符串常量 双引号标记的字符集
可以做初值赋值给字符数组 使用%s的格式输出
char str[20]="Hello World";
不能把字符串常量赋值给字符变量

4 bool型
整型常量在赋值给bool型变量时会自动转换为ture（非零）或false（零）
非零包括正整数和负整数 1和-1都会转换为ture
使用%d输出bool型变量 ture和false会输出1和0

2.1.3 强制类型转换

（新类型名）变量名
int(r);double(a)；
%.1f是指保留一位小数输出

2.1.4 符号常量和const常量

#define 标识符 常量
#define pi=3.14

const 数据类型 变量名 = 常量；
const double pi=3.14;

define还可宏定义
#define 标识符 任何语句或片段
#define ADD(a,b) ((a)+(b))
宏定义是将直接对应的部分替换，然后才进行编译和运行，因此需要添加足够多的括号

2.1.5 运算符

1 算术运算符

被除数和除数都是整型时，用除法会舍去小数部分，即向下取整
除数是0会异常
加减乘除四种运算符的优先级顺序和四则运算的优先级相同
取模运算符的优先级和除法运算符相同
i++是先使用i再将i+1
++i是先将i加1再使用i

2 关系运算符

3 逻辑运算符

4 条件运算符

C语言中唯一的三目运算符 A?B:C;
如果A为真，那么执行并返回B的结果
如果A为假，那么执行并返回C的结果

5 位运算符

2^30-1
const int INF=(1<<30)-1;//必须加括号，因为位运算符优先级没有算术运算符高
const int INF=0x3fffffff;

<< 左移 a<<x 整数a按二进制位左移x位
>> 右移 a>>x 整数a按二进制位右移x位
& 位与 a&b 整数a和b按二进制对齐，按位进行与运算（除了11得1，其他均为0）
| 位或 a|b 整数a和b按二进制对齐，按位进行或运算（除了00得0，其他均为1）
^ 位异或 a^b 整数a和b按二进制对齐，按位进行异或运算（相同为0，不同为1）
~ 位取反 ~a 整数a的二进制的每一位进行0变1、1变0的操作

2.2 顺序结构

2.2.1 赋值表达式

2.2.2 使用scanf和printf输入/输出

1 scanf函数的使用

stdio.h库函数提供了scanf函数和printf函数
scanf("格式控制",变量地址);
scanf("%d",&n);
&取地址运算符
int %d
long long %lld
float %f
double %lf
char %c
字符串 char数组 %s

数组名前没有&取地址运算符
数组名称本身就代表了这个数组第一个元素的地址
scanf中，除了char数组整个输入不加&，其他变量类型都需要加&

除了%c外，scanf对其他格式符如%d的输入是以空白符（即空格、Tab）为结束判断标志的

因此除法使用%c把空格按字符读入，其他情况都会自动跳过空格
字符数组使用%s读入的时候以空格跟换行为读入结束的标志

2 printf函数的使用

printf("格式控制",变量名称);
printf("%d",n);
int %d
long long %lld
float %f
double %f
char %c
字符串 char数组 %s
double型变量，其输出格式变成了%f，而在scanf中却是%lf

printf中可以使用转移字符（scanf里也可以，但一般用不到）
例如加上"\n"进行换行

如果想输出'%'和'\'，则需要在前面再加一个%或\
printf("%%");
printf("\\");

三种输出格式

A %md
可以使不足m位的int型变量以m位进行右对齐输出，其中高位用空格补齐
如果变量本身超过m位，则保持原样
%5d
  123
1234567

B %0md
和%md的不同点在于，当变量不足m位时，将在前面补足够数量的0而不是空格
%05d
00123
1234567

C %.mf
让浮点数保留m位小数输出
保留使用的是精度的四舍六入五成双规则
%.3f
12.346

2.2.3 使用getchar和putchar输入\输出字符

getchar用来输入单个字符
putchar用来输出单个字符

2.2.4 注释

































































